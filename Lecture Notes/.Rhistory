text(1:11, unlist(contentR.num), pos = 2, cex = 1)
contentR.avg<-c(rating.avg("R")[[1]],rating.avg("PG-13")[[1]],rating.avg("PG")[[1]],rating.avg("Approved")[[1]],rating.avg("Passed")[[1]],rating.avg("Not Rated")[[1]],rating.avg("G")[[1]],rating.avg("X")[[1]],rating.avg("Unrated")[1],rating.avg("TV-MA")[[1]],rating.avg("M")[[1]])
# because the values are large I made the text small using the par statement
par(cex=0.5)
plot(unlist(contentR.avg),xaxt="n",xlab="Content Rating Type", ylab="Mean Gross Revenue",main="Mean Gross Revenue for each Content Rating Category")
axis(1,at=1:11,labels=rating)
contentR.num<-c(rating.avg("R")[[2]],rating.avg("PG-13")[[2]],rating.avg("PG")[[2]],rating.avg("Approved")[[2]],rating.avg("Passed")[[2]],rating.avg("Not Rated")[[2]],rating.avg("G")[[2]],rating.avg("X")[[2]],rating.avg("Unrated")[2],rating.avg("TV-MA")[[2]],rating.avg("M")[[2]])
text(1:11, unlist(contentR.num), pos = 2, cex = 1)
text(unlist(contentR.avg), paste(unlist(contentR.num)), pos = 1, cex = 1)
# function that gets the mean gross revenue
rating.avg<-function(type){
indexr<-data$Gross[which(data$Rating==type)]
indexr<-indexr[which(!is.na(indexr))]
avg<- sum(indexr)/length(indexr)
return(list(average=avg,movNum=length(indexr)))
}
# evaluate the function for different ratings
rating<-c("R","PG-13","PG","Approved","Passed","Not Rated", "G", "X","Unrated","TV-MA","M")
contentR.avg<-c(rating.avg("R")[[1]],rating.avg("PG-13")[[1]],rating.avg("PG")[[1]],rating.avg("Approved")[[1]],rating.avg("Passed")[[1]],rating.avg("Not Rated")[[1]],rating.avg("G")[[1]],rating.avg("X")[[1]],rating.avg("Unrated")[1],rating.avg("TV-MA")[[1]],rating.avg("M")[[1]])
# because the values are large I made the text small using the par statement
par(cex=0.5)
plot(unlist(contentR.avg),xaxt="n",xlab="Content Rating Type", ylab="Mean Gross Revenue",main="Mean Gross Revenue for each Content Rating Category")
axis(1,at=1:11,labels=rating)
contentR.num<-c(rating.avg("R")[[2]],rating.avg("PG-13")[[2]],rating.avg("PG")[[2]],rating.avg("Approved")[[2]],rating.avg("Passed")[[2]],rating.avg("Not Rated")[[2]],rating.avg("G")[[2]],rating.avg("X")[[2]],rating.avg("Unrated")[2],rating.avg("TV-MA")[[2]],rating.avg("M")[[2]])
text(unlist(contentR.avg), paste(unlist(contentR.num)), pos = 1, cex = 1)
# function that gets the mean gross revenue
rating.avg<-function(type){
indexr<-data$Gross[which(data$Rating==type)]
indexr<-indexr[which(!is.na(indexr))]
avg<- sum(indexr)/length(indexr)
return(list(average=avg,movNum=length(indexr)))
}
# evaluate the function for different ratings
rating<-c("R","PG-13","PG","Approved","Passed","Not Rated", "G", "X","Unrated","TV-MA","M","NA")
contentR.avg<-c(rating.avg("R")[[1]],rating.avg("PG-13")[[1]],rating.avg("PG")[[1]],rating.avg("Approved")[[1]],rating.avg("Passed")[[1]],rating.avg("Not Rated")[[1]],rating.avg("G")[[1]],rating.avg("X")[[1]],rating.avg("Unrated")[1],rating.avg("TV-MA")[[1]],rating.avg("M")[[1]],rating.avg("NA")[[1]])
# because the values are large I made the text small using the par statement
par(cex=0.5)
plot(unlist(contentR.avg),xaxt="n",xlab="Content Rating Type", ylab="Mean Gross Revenue",main="Mean Gross Revenue for each Content Rating Category")
axis(1,at=1:11,labels=rating)
contentR.num<-c(rating.avg("R")[[2]],rating.avg("PG-13")[[2]],rating.avg("PG")[[2]],rating.avg("Approved")[[2]],rating.avg("Passed")[[2]],rating.avg("Not Rated")[[2]],rating.avg("G")[[2]],rating.avg("X")[[2]],rating.avg("Unrated")[2],rating.avg("TV-MA")[[2]],rating.avg("M")[[2]],rating.avg("NA")[[2]])
text(unlist(contentR.avg), paste(unlist(contentR.num)), pos = 1, cex = 1)
# function that gets the mean gross revenue
rating.avg<-function(type){
indexr<-data$Gross[which(data$Rating==type)]
indexr<-indexr[which(!is.na(indexr))]
avg<- sum(indexr)/length(indexr)
return(list(average=avg,movNum=length(indexr)))
}
# evaluate the function for different ratings
rating<-c("R","PG-13","PG","Approved","Passed","Not Rated", "G", "X","Unrated","TV-MA","M","NA")
contentR.avg<-c(rating.avg("R")[[1]],rating.avg("PG-13")[[1]],rating.avg("PG")[[1]],rating.avg("Approved")[[1]],rating.avg("Passed")[[1]],rating.avg("Not Rated")[[1]],rating.avg("G")[[1]],rating.avg("X")[[1]],rating.avg("Unrated")[1],rating.avg("TV-MA")[[1]],rating.avg("M")[[1]],rating.avg("NA")[[1]])
# because the values are large I made the text small using the par statement
par(cex=0.5)
plot(unlist(contentR.avg),xaxt="n",xlab="Content Rating Type", ylab="Mean Gross Revenue",main="Mean Gross Revenue for each Content Rating Category")
axis(1,at=1:12,labels=rating)
contentR.num<-c(rating.avg("R")[[2]],rating.avg("PG-13")[[2]],rating.avg("PG")[[2]],rating.avg("Approved")[[2]],rating.avg("Passed")[[2]],rating.avg("Not Rated")[[2]],rating.avg("G")[[2]],rating.avg("X")[[2]],rating.avg("Unrated")[2],rating.avg("TV-MA")[[2]],rating.avg("M")[[2]],rating.avg("NA")[[2]])
text(unlist(contentR.avg), paste(unlist(contentR.num)), pos = 1, cex = 1)
gross<-data$Gross
user<-data$NumRaters[which(!is.na(gross))]
userr<-data$UserRating[which(!is.na(gross))]
gross<-data$Gross[which(!is.na(gross))]
fit<-lm(gross ~ user)
summary(fit)
confint.lm(fit)
par(cex=0.8)
plot(user,gross,xlab="User Rating",ylab="Gross Revenue",main="Gross Revenue vs. Number of User Ratings")
abline(fit)
par(cex=1)
fit2<-lm(gross ~ userr)
summary(fit2)
confint.lm(fit2)
plot(userr,gross,xlab="User Rating",ylab="Gross Revenue",main="Gross Revenue vs. Number of User Ratings")
abline(fit2)
setwd("/Users/ankitashankhdhar/Documents/Grad 2nd yr/Comp Stats/Lab 7")
debt<-read.csv("debt.csv")
avgGDP<-tapply(debt$growth,debt$Country,mean)
avgGDP<- as.table(avgGDP)
avgGDPyr<-tapply(debt$growth,debt$Year,mean)
avgGDPyr.new<-as.vector(avgGDPyr)
plot(as.numeric(rownames(avgGDPyr)),avgGDPyr)
cor(debt$growth,debt$ratio)
avgGDPyr<-tapply(debt$growth,debt$Year,mean)
avgGDPyr.new<-as.vector(avgGDPyr)
plot(as.numeric(rownames(avgGDPyr)),avgGDPyr,xlab="Average GDP per year", ylab="Year")
avgGDPyr<-tapply(debt$growth,debt$Year,mean)
avgGDPyr.new<-as.vector(avgGDPyr)
plot(as.numeric(rownames(avgGDPyr)),avgGDPyr,ylab="Average GDP per year", xlab="Year")
cor(debt$growth,debt$ratio)
country<-split(debt,debt$Country)
names(country)
index_cor<-function(data){
x<-data$growth
y<-data$ratio
correlation.xy<-cor(x,y)
return(correlation.xy)
}
correlation.country<- sapply(country,index_cor)
mean(correlation.country)
plot(correlation.country)
axis(1,at=1:20,labels=names(correlation.country))
cat("The countries that have a positive growth and debt-GDP ratio correlation are the ones that have the correlation against the trend:", correlation.country[which(correlation.country >0)])
country<-split(debt,debt$Country)
names(country)
index_cor<-function(data){
x<-data$growth
y<-data$ratio
correlation.xy<-cor(x,y)
return(correlation.xy)
}
correlation.country<- sapply(country,index_cor)
mean(correlation.country)
par(cex=0.8)
plot(correlation.country)
axis(1,at=1:20,labels=names(correlation.country))
cat("The countries that have a positive growth and debt-GDP ratio correlation are the ones that have the correlation against the trend:", correlation.country[which(correlation.country >0)])
country<-split(debt,debt$Country)
names(country)
index_cor<-function(data){
x<-data$growth
y<-data$ratio
correlation.xy<-cor(x,y)
return(correlation.xy)
}
correlation.country<- sapply(country,index_cor)
mean(correlation.country)
par(cex=0.5)
plot(correlation.country)
axis(1,at=1:20,labels=names(correlation.country))
cat("The countries that have a positive growth and debt-GDP ratio correlation are the ones that have the correlation against the trend:", correlation.country[which(correlation.country >0)])
par(cex=0.2)
plot(correlation.country)
axis(1,at=1:20,labels=names(correlation.country))
par(cex=0.4)
plot(correlation.country)
axis(1,at=1:20,labels=names(correlation.country))
year<-split(debt,debt$Year)
names(year)
correlation.year<- sapply(year,index_cor)
mean(correlation.year)
plot(correlation.year)
axis(1,at=1:64,labels=names(correlation.year))
year<-split(debt,debt$Year)
names(year)
correlation.year<- sapply(year,index_cor)
mean(correlation.year)
par(cex=0.4)
plot(correlation.year)
axis(1,at=1:64,labels=names(correlation.year))
year<-split(debt,debt$Year)
names(year)
correlation.year<- sapply(year,index_cor)
mean(correlation.year)
plot(correlation.year)
axis(1,at=1:64,labels=names(correlation.year))
country<-split(debt,debt$Country)
names(country)
index_cor<-function(data){
x<-data$growth
y<-data$ratio
correlation.xy<-cor(x,y)
return(correlation.xy)
}
correlation.country<- sapply(country,index_cor)
mean(correlation.country)
par(cex=0.5)
plot(correlation.country)
axis(1,at=1:20,labels=names(correlation.country))
year<-split(debt,debt$Year)
names(year)
correlation.year<- sapply(year,index_cor)
mean(correlation.year)
plot(correlation.year)
axis(1,at=1:64,labels=names(correlation.year))
plot(debt$ratio,debt$growth, main="GDP Growth vs. Debt-GDP Ratio", xlab="Debt Ratio",ylab="GDP Growth")
Yes the shape does match what I expected from problem 4 specially because we can observe the GDP growth decreasing as the debt ratio increases
```
install.packages('plyr')
install.packages('plyr')
setwd("/Users/ankitashankhdhar/Documents/Grad 2nd yr/Comp Stats/Lecture Notes")
data <- read.csv("debt.csv")
#find the max growth of each country
max.growths <- tapply(data$growth,data$Country,max)
#seems like a vector
max.growths[1:3]
#but R says no its not
is.vector(max.growths)
#gets the names of the output which in our case are the countries
names(max.growths)[1:3]
#puts this all in a data frame
data.frame(country=names(max.growths),max.growth=as.vector(max.growths))[1:5,]
library(plyr)
#summarize is required to get it in the format we want (part of the syntax)
ddply(data,.(Country),summarize,max.growth=max(growth))[1:5,]
dlply(data,.(Country),summarize,max.growth=max(growth))
#gets the names of the output which in our case are the countries
names(max.growths)[1:3]
#puts this all in a data frame
data.frame(country=names(max.growths),max.growth=as.vector(max.growths))[1:5,]
library(plyr)
dlply(data,.(Country),summarize,max.growth=max(growth))
setwd("/Users/ankitashankhdhar/Documents/Grad 2nd yr/Comp Stats/Lecture Notes")
data <- read.csv("debt.csv")
#find the max growth of each country
max.growths <- tapply(data$growth,data$Country,max)
#seems like a vector
max.growths[1:3]
#but R says no its not
is.vector(max.growths)
#summarize is required to get it in the format we want (part of the syntax)
ddply(data,.(Country),summarize,max.growth=max(growth))[1:5,]
#not using summarize here
#we are applying it to the whole data
#not using summarize here
#we are applying it to the whole data
ddply(data,.(Country),c("nrow", "ncol"))[1:5,]
#looking at the growth to debt ratio
cor.by.country <- function(one.c.data)
cor(one.c.data$growth,one.c.data$ratio)
# input data frame = data
# split variable = Country
# the function you want to apply = cor.by.country
ddply(data,.(Country),"cor.by.country")[1:5,]
ddply(data,.(Country),summarize,max.growth=max(growth))[1:5,]
dlply(data,.(Country),summarize,max.growth=max(growth))
setwd("/Users/ankitashankhdhar/Documents/Grad 2nd yr/Comp Stats/Lecture Notes")
data <- read.csv("debt.csv")
#find the max growth of each country
max.growths <- tapply(data$growth,data$Country,max)
#seems like a vector
max.growths[1:3]
#but R says no its not
is.vector(max.growths)
#gets the names of the output which in our case are the countries
names(max.growths)[1:3]
#puts this all in a data frame
data.frame(country=names(max.growths),max.growth=as.vector(max.growths))[1:5,]
library(plyr)
#summarize is required to get it in the format we want (part of the syntax)
ddply(data,.(Country),summarize,max.growth=max(growth))[1:5,]
ddply(data,.(Country),summarize,max.growth=max(growth))
links.new2 <- sapply(top250.codes[50:250],linked.checknew)
links.new2[links.new2 != 1] <- 0
links.new2 <- as.data.frame(t(links.new2),stringsAsFactors=FALSE)
colnames(links.new2)<-top250.codes
View(data)
data$Country[which != "Australia","Canada" ]
data$Country[which != list("Australia","Canada") ]
debt$Country[which != list("Australia","Canada") ]
remove<-c("Australia","Canada")
debt$Country[which != remove]
remove<-list("Australia","Canada")
debt$Country[which != remove]
library(knitr)
opts_chunk$set(tidy.opts=list(width.cutoff=60))
# reading the the whole page
top250.page <- readLines("http://www.imdb.com/chart/top?ref_=ft_250")
# find where "/title/tt" occurs on that page
top250.codes <- top250.page[grep("/title/tt",top250.page)]
# slit the entries by looking for "/" and only keep the ones 3rd entry on the list (which are the codes)
top250.codes <- unlist(strsplit(top250.codes,split="//?"))[seq(from=3,to=1999,by=4)]
# get the codes for each of the movies
top250.codes <- top250.codes[seq(from=2,to=500,by=2)]
# list the top 6 codes
head(top250.codes)
get.stuff <- function(imdb.code){
#reads in the page of a specific moview
address <- paste("http://www.imdb.com/title/",imdb.code,sep="")
page.movie <-readLines(address)
# get title
title1 <- c(page.movie[grep("<title>",page.movie)])
title2<- unlist(strsplit(title1,split="<title>"))[seq(from=2,to=200,by=2)]
title3<-strsplit(title2,split=" \\(")[[1]][1]
title <- gsub(") - IMDb</title>","",title3)
# get the year
year1 <- unlist(strsplit(title1,split="\\("))[seq(from=2,to=200,by=2)]
year <-gsub(") - IMDb</title>","",year1)[1]
# rating of movie
rating1 <- c(page.movie[grep("contentRating",page.movie)[1]])
rating2 <- unlist(strsplit(rating1,split="content="))[seq(from=2,to=200,by=2)]
rating<- unlist(strsplit(rating1,split=">"))[seq(from=2,to=200,by=2)][1]
# user rating
User.Rating1 <- page.movie[grep("Users rated this",page.movie)[1]]
User.Rating2 <- strsplit(User.Rating1,"/")[[1]][1]
User.Rating3<- as.numeric(strsplit(User.Rating2,"this ")[[1]][2])
User.Rating <-User.Rating3
# get the number of raters
num.rater1 <- unlist(strsplit(User.Rating1,split="\\("))[seq(from=2,to=200,by=2)]
num.rater2 <-strsplit(num.rater1," votes")[[1]][1]
num.rater<-as.numeric(gsub("\\,","",num.rater2))
# get the genre
inds <- grep("ref_=tt_stry_gnr",page.movie)
genre1 <- unlist(strsplit(page.movie[inds],"/genre/"))[seq(from=2,to=length(inds)*2,by=2)]
genre2 <- unlist(strsplit(genre1,"\\?"))[seq(from=1,to=length(inds)*2,by=2)]
genre3<- paste(genre2,collapse=" ")
genre <- gsub(" ", ", ",genre3)
########## BUSINESS ########
budget<-NA
opn<-NA
gross<-NA
# read the business page
address1 <- paste("http://www.imdb.com/title/",imdb.code,"/business",sep="")
business.page <- readLines(address1)
# find where Budget occurs
temp <- grep("Budget",business.page)
# walk through and find the $ signs
if (length(temp)>0)
{
budget1 <- business.page[temp+1]
budget2 <- strsplit(budget1," \\(")[[1]][1]
budget3 <- gsub("\\$","",budget2)
budget<- as.numeric(gsub("\\,","",budget3))
}
# find where Opening Weekend occurs
temp2 <- grep("Opening Weekend",business.page)
# walk through and find the $ signs
if (length(temp2)>0)
{
opn1 <- business.page[temp2+1]
opn2 <- strsplit(opn1," \\(")[[1]][1]
opn3 <- gsub("\\$","",opn2)
opn<- as.numeric(gsub("\\,","",opn3))
}
# find where Gross occurs
temp3 <- grep("Gross",business.page)
# walk through and find the $ signs
if (length(temp3)>0)
{
gross1 <- business.page[temp3+1]
gross2 <- strsplit(gross1," \\(")[[1]][1]
gross3 <- gsub("\\$","",gross2)
gross<- as.numeric(gsub("\\,","",gross3))
}
return (list(Title=title,Year=year,Rating=rating,UserRating=User.Rating,NumRaters=num.rater, Budget=budget, Opening.Night=opn, Gross=gross,Genre=genre))
}
as.vector(get.stuff("tt0407887"))
# apply to all the codes using sapply()
data <- sapply(top250.codes,get.stuff)
# turn it into data drame
data <- as.data.frame(t(data))
# sapply() leave each column of data in an odd format (a vector of lists!)
# to fix that
for (i in 1:dim(data)[2])
data[,i] <- unlist(data[,i])
sort.gross<-function(m){
# merge title and the gross amount together
title.gross<- merge(as.numeric(data$Gross),as.character(data$Title),by=c("row.names"))
# put them all in decreasing order
gross.sorted<-title.gross[with(title.gross, order(-title.gross$x)),]
# return them put together
return (paste(Title=gross.sorted$y[1:m],":", "$",GrossAmount=gross.sorted$x[1:m]))
}
# find 5 movies that made most money
sort.gross(5)
# function that gets the mean gross revenue
rating.avg<-function(type){
indexr<-data$Gross[which(data$Rating==type)]
indexr<-indexr[which(!is.na(indexr))]
avg<- sum(indexr)/length(indexr)
return(list(average=avg,movNum=length(indexr)))
}
# evaluate the function for different ratings
rating<-c("R","PG-13","PG","Approved","Passed","Not Rated", "G", "X","Unrated","TV-MA","M","NA")
contentR.avg<-c(rating.avg("R")[[1]],rating.avg("PG-13")[[1]],rating.avg("PG")[[1]],rating.avg("Approved")[[1]],rating.avg("Passed")[[1]],rating.avg("Not Rated")[[1]],rating.avg("G")[[1]],rating.avg("X")[[1]],rating.avg("Unrated")[1],rating.avg("TV-MA")[[1]],rating.avg("M")[[1]],rating.avg("NA")[[1]])
# because the values are large I made the text small using the par statement
par(cex=0.5)
plot(unlist(contentR.avg),xaxt="n",xlab="Content Rating Type", ylab="Mean Gross Revenue",main="Mean Gross Revenue for each Content Rating Category")
axis(1,at=1:12,labels=rating)
contentR.num<-c(rating.avg("R")[[2]],rating.avg("PG-13")[[2]],rating.avg("PG")[[2]],rating.avg("Approved")[[2]],rating.avg("Passed")[[2]],rating.avg("Not Rated")[[2]],rating.avg("G")[[2]],rating.avg("X")[[2]],rating.avg("Unrated")[2],rating.avg("TV-MA")[[2]],rating.avg("M")[[2]],rating.avg("NA")[[2]])
text(unlist(contentR.avg), paste(unlist(contentR.num)), pos = 1, cex = 1)
gross<-data$Gross
user<-data$NumRaters[which(!is.na(gross))]
userr<-data$UserRating[which(!is.na(gross))]
gross<-data$Gross[which(!is.na(gross))]
fit<-lm(gross ~ user)
summary(fit)
confint.lm(fit)
par(cex=0.8)
plot(user,gross,xlab="User Rating",ylab="Gross Revenue",main="Gross Revenue vs. Number of User Ratings")
abline(fit)
par(cex=1)
fit2<-lm(gross ~ userr)
summary(fit2)
confint.lm(fit2)
plot(userr,gross,xlab="User Rating",ylab="Gross Revenue",main="Gross Revenue vs. Number of User Ratings")
abline(fit2)
comedy_all<- data$Gross[grep("Comedy",data$Genre)]
drama_all<- data$Gross[grep("Drama",data$Genre)]
t.test(comedy_all,drama_all)
# calculate the mean of the all the NA gross revenues
mean.gross<-data$Gross[which(!is.na(data$Gross))]
# calculate the mean of all the NA opening weekend revenues
mean.opn<-data$Opening.Night[which(!is.na(data$Opening.Night))]
# make them the same length so I can plot them together
maxl<-max(length(mean.gross),length(mean.opn))
length(mean.opn)<-maxl
plot(mean.opn,mean.gross, main="Gross Revenue vs Opening Weekend Revenue", xlab="Opening Weekend", ylab="Gross",pch=5)
linked.movies <- function(imdb.code)
{
# read the movie page
address <- paste("http://www.imdb.com/title/",imdb.code,sep="")
page <- readLines(address)
# find the lines with the recommendations and strip the unneeded stuff
recs <- page[grep("rec_item",page)]
recs <- unlist(strsplit(recs,"data-tconst="))[seq(from=2,to=24,by=2)]
# return the codes
recs <- paste("tt",gsub("[^0-9]","",recs),sep="")
return(recs)
}
linked.checknew<-function(imdb.code){
# store the top 250 codes
linked<-c(top250.codes)
# tranpose them so they become our columns
linked<-t(linked)
# set this rows to be the codes as well
vnew<-linked
# get the reccomended movies for the code
linked.codes<-linked.movies(imdb.code)
# if the length of the matched codes is not NA
linked.codes1<-linked.codes[which(!is.na(match(linked.codes,linked)))]
if (length(linked.codes1) !=0){
# set the vector of all codes to be 1 at the matching code
vnew[which(!is.na(match(vnew,linked.codes1[1:length(linked.codes1)])))]<-1
}
return (c(vnew))
}
links.new <- sapply(top250.codes,linked.checknew)
links.new[links.new != 1] <- 0
links.new <- as.data.frame(t(links.new),stringsAsFactors=FALSE)
colnames(links.new)<-top250.codes
remove <- c("tt0137523", "tt0110912", "tt0172495", "tt0109830", "tt0053125")
top250.new<- top250.codes[which(top250.codes != remove]
links.new2 <- sapply(top250.new,linked.checknew)
links.new2[links.new2 != 1] <- 0
links.new2 <- as.data.frame(t(links.new2),stringsAsFactors=FALSE)
colnames(links.new2)<-top250.codes
top250.new<- top250.codes[which(top250.codes != remove[1]]
remove[1]
which(top250.codes != remove[1]
)
top250.new<- top250.codes[which(top250.codes != remove)]
links.new2 <- sapply(top250.new,linked.checknew)
links.new2[links.new2 != 1] <- 0
links.new2 <- as.data.frame(t(links.new2),stringsAsFactors=FALSE)
colnames(links.new2)<-top250.codes
library(statnet)
with.some <- network(links.new2)
plot(with.some,main="Network after removing top 5 linked movies")
# function that only looks at the number of reccomended movies specifief
linked.checkNum<-function(imdb.code,linkedNum){
linked<-c(top250.codes)
linked<-t(linked)
vnew<-linked
linked.codes<-linked.movies(imdb.code)[1:linkedNum]
linked.codes1<-linked.codes[which(!is.na(match(linked.codes,linked)))]
if (length(linked.codes1) !=0){
vnew[which(!is.na(match(vnew,linked.codes1[1:length(linked.codes1)])))]<-1
}
return (c(vnew))
}
# for the top 2 reccomended
num<-2
links.num2 <- sapply(top250.codes,linked.checkNum,linkedNum=num)
links.num2[links.num2 != 1] <- 0
links.num2 <- as.data.frame(t(links.num2))
colnames(links.num2)<-top250.codes
# for the top 4 reccomended
num<-4
links.num4 <- sapply(top250.codes,linked.checkNum,linkedNum=num)
links.num4[links.num4 != 1] <- 0
links.num4 <- as.data.frame(t(links.num4))
colnames(links.num4)<-top250.codes
# for the top 8 reccomended
num<-8
links.num8 <- sapply(top250.codes,linked.checkNum,linkedNum=num)
links.num8[links.num8 != 1] <- 0
links.num8 <- as.data.frame(t(links.num8))
colnames(links.num8)<-top250.codes
# convert the output of all recommendations to a matrix
link.matrix<- matrix(as.numeric(unlist(links.new)), nrow=250, ncol=250)
rownames(link.matrix)<-top250.codes
# sum all the columns of the matrix
linkTotal<-colSums(link.matrix)
# make a new list with the title and the totals
movie.linkNum <- list(Title=as.character(data$Title),NumLink=as.numeric(linkTotal))
movie.linkNum<- merge(as.character(data$Title),as.numeric(linkTotal),by="row.names")
# sort them by decreasing order
movie.linkNum<-movie.linkNum[with(movie.linkNum, order(-movie.linkNum$y)),]
movie.linkNum <- data.frame(Title=movie.linkNum$x,NumOfLinks=movie.linkNum$y)
# print the top 6 with most number of matches
head(movie.linkNum)
moviw.linkNum[1:10]
movie.linkNum[1:10]
View(movie.linkNum)
remove <- c("tt0137523", "tt0110912", "tt0172495", "tt0109830", "tt0053125", "tt0120737", "tt0114369", "tt0120586", "tt1375666", "tt0167261", "tt0133093")
top250.new<- top250.codes[which(top250.codes != remove)]
links.new2 <- sapply(top250.new,linked.checknew)
links.new2[links.new2 != 1] <- 0
links.new2 <- as.data.frame(t(links.new2),stringsAsFactors=FALSE)
colnames(links.new2)<-top250.codes
with.some <- network(links.new2)
plot(with.some,main="Network after removing top 11 linked movies")
View(errorbar)
View(movie.linkNum)
remove <- c("tt0137523", "tt0110912", "tt0172495", "tt0109830", "tt0053125", "tt0120737", "tt0114369", "tt0120586", "tt1375666", "tt0167261", "tt0133093","tt0043014","tt1853728","tt0073486","tt0102926","tt0033467","tt0167260","tt1205489","tt0034583","tt0120815")
top250.new<- top250.codes[which(top250.codes != remove)]
links.new2 <- sapply(top250.new,linked.checknew)
links.new2[links.new2 != 1] <- 0
links.new2 <- as.data.frame(t(links.new2),stringsAsFactors=FALSE)
colnames(links.new2)<-top250.codes
with.some <- network(links.new2)
plot(with.some,main="Network after removing top 20 most linked movies")
plot(with.all,main="Network with all the recommended movies")
